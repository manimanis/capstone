from flask import jsonify, abort, request

from . import api, read_request_args, check_teachers_rights
from .. import db
from ..auth import requires_auth
from ..models import Teacher, Exam, StudentSubscription, Student


# Important note:
# ----------------
# We refer in this file to authenticated teacher. As the REST API is stateless,
# we mean by authenticated teacher, the username that is registered in our
# database as a teacher and using a token generated by Auth0 to access the
# following end points.


@api.route('/exams')
@requires_auth('list:exams')
def get_exams_list(payload):
    """Return the list of the exams authored by the authenticated teacher."""
    start, end, search = read_request_args()
    teacher = check_teachers_rights(payload['sub'])
    query = (Exam
             .text_search(search)
             .filter(Exam.author_id == teacher.id)
             .order_by(Exam.dt_creation.desc()))
    search_count = query.count()
    exams_count = Exam.get_query().filter(Exam.author_id == teacher.id).count()
    start, end = max(start, 0), min(end, search_count)
    exams = Exam.to_list_of_dict(
        query.slice(start, end),
        include_fields=Exam.get_table_columns()+['enrolled_count'])
    return jsonify({
        'success': True,
        'exams_count': exams_count,
        'search_count': search_count,
        'start': start,
        'end': end,
        'exams': exams
    })


@api.route('/exams', methods=['POST'])
@requires_auth('create:exams')
def create_exam(payload):
    """Create an empty exam for the authenticated teacher."""
    teacher = check_teachers_rights(payload['sub'])
    exam = Exam.create_sample(teacher)
    if not exam.insert():
        abort(400, description='Cannot create an exam.')
    return jsonify({
        'success': True,
        'exam': exam.to_dict(exam)
    })


@api.route('/exams/<int:exam_id>', methods=['PATCH'])
@requires_auth('edit:exams')
def edit_exam(payload, exam_id):
    """Edit the exam for the authenticated teacher."""
    teacher = check_teachers_rights(payload['sub'])
    exam = Exam.get_by_id(exam_id)
    if exam is None:
        abort(404, description='Exam not found.')
    if exam.author_id != teacher.id:
        abort(403, description="Cannot modify others teachers exams.")
    data = request.get_json()
    if not Exam.can_update(data):
        abort(400, description="Missing important fields to update an exam.")
    exam.prepare_update(data)
    if not Exam.update():
        abort(400, description="Failed to update an exam.")
    return jsonify({
        'success': True,
        'updated': exam_id
    })


@api.route('/exams/<int:exam_id>', methods=['DELETE'])
@requires_auth('archive:exams')
def delete_exam(payload, exam_id):
    """Archive one exam authored by the authenticated teacher."""
    teacher = check_teachers_rights(payload['sub'])
    exam = Exam.get_by_id(exam_id)
    if exam is None:
        abort(404, description='Exam not found.')
    if exam.author_id != teacher.id:
        abort(403, description="Cannot delete others teachers exams.")
    if not exam.archive():
        abort(400, description="Failed to delete an exam.")
    return jsonify({
        'success': True,
        'deleted': exam_id
    })
